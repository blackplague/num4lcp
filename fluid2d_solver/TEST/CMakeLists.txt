SET(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} -code=sm_30 -arch=compute_30") # Set compute capability of Nvidia card, ability to solve for double.

#SET(CUDA_NVCC_FLAGS -maxrregcount 24)
#SET(CUDA_NVCC_FLAGS_DEBUG -DTHRUST_DEBUG)
#SET(CUDA_NVCC_FLAGS_DEBUG -g; -G) # Enable cuda-gdb debugger

INCLUDE_DIRECTORIES( 
  ${PROJECT_SOURCE_DIR}/CODE/include/cusplibrary-0.5.1/
  ${PROJECT_SOURCE_DIR}/CODE/include
  ${PROJECT_SOURCE_DIR}/TEST/include
  ${CUDA_TOOLKIT_INCLUDE}
)

FILE(GLOB 
  SOURCES 
  ${PROJECT_SOURCE_DIR}/TEST/src/*.cu
  )

FILE(GLOB 
  HEADERS 
  ${PROJECT_SOURCE_DIR}/TEST/include/*.h 
  )

CUDA_ADD_EXECUTABLE( unittesting ${SOURCES} ${HEADERS} )

IF(CMAKE_GENERATOR MATCHES Xcode)		
  SET_TARGET_PROPERTIES(unittesting PROPERTIES XCODE_ATTRIBUTE_LD_RUNPATH_SEARCH_PATHS "/usr/local/cuda/lib")
  SET_TARGET_PROPERTIES(unittesting PROPERTIES XCODE_ATTRIBUTE_FRAMEWORK_SEARCH_PATHS "/Library/Frameworks")
  SET_TARGET_PROPERTIES(unittesting PROPERTIES XCODE_ATTRIBUTE_WARNING_CFLAGS "-Wall")
ENDIF(CMAKE_GENERATOR MATCHES Xcode)

SET_TARGET_PROPERTIES(unittesting PROPERTIES DEBUG_POSTFIX "D" )
SET_TARGET_PROPERTIES(unittesting PROPERTIES RUNTIME_OUTPUT_DIRECTORY            "${PROJECT_SOURCE_DIR}/bin/")
SET_TARGET_PROPERTIES(unittesting PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG      "${PROJECT_SOURCE_DIR}/bin/")
SET_TARGET_PROPERTIES(unittesting PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE    "${PROJECT_SOURCE_DIR}/bin/")
